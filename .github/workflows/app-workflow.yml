name: "CSYE6225 User Onboarding Packer Build"

on:
  push:
    branches:
      - 'main'
    paths:
      - '**'
jobs:
  packer-build:
    if: github.repository == 'CSYE-6225-Cloud-Computing-Sarvesh/webapp'
    name: User Onboarding API Packer Build
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_USER: ${{ secrets.MYSQL_ROOT_USER }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      TEST_APP_NAME: ${{ vars.TEST_APP_NAME }}
      TEST_APP_PORT: ${{ secrets.TEST_APP_PORT }}
      TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
      TEST_DB_OPERATION: ${{ secrets.TEST_DB_OPERATION }}
      TEST_MYSQL_PASSWORD: ${{ secrets.TEST_MYSQL_PASSWORD }}
      TEST_MYSQL_USER: ${{ secrets.TEST_MYSQL_USER }}
      TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}
      TEST_LOG_LEVEL: ${{ vars.TEST_LOG_LEVEL }}
      PROD_APP_NAME: ${{ vars.PROD_APP_NAME }}
      PROD_APP_PORT: ${{ secrets.PROD_APP_PORT }}
      PROD_LOG_LEVEL: ${{ vars.PROD_LOG_LEVEL }}
      PKR_AMI_OWNER: ${{ vars.PKR_AMI_OWNER }}
      PKR_AMI_PREFIX: ${{ vars.PKR_AMI_PREFIX }}
      PKR_AMI_USERS: ${{ vars.PKR_AMI_USERS }}
      PKR_INSTANCE_TYPE: ${{ vars.PKR_INSTANCE_TYPE }}
      PKR_REGION: ${{ vars.PKR_REGION }}
      PKR_SSH_USERNAME: ${{ vars.PKR_SSH_USERNAME }}
      PKR_SUBNET_ID: ${{ vars.PKR_SUBNET_ID }}
      PKR_VOLUME_SIZE: ${{ vars.PKR_VOLUME_SIZE }}
      PKR_VOLUME_TYPE: ${{ vars.PKR_VOLUME_TYPE }}
      PKR_VPC_ID: ${{ vars.PKR_VPC_ID }}
      PKR_AMI_REGIONS: ${{ vars.PKR_AMI_REGIONS }}
      ASG_NAME: ${{ vars.ASG_NAME }}
      LAUNCH_TEMPLATE_NAME: ${{ vars.LAUNCH_TEMPLATE_NAME }}
      MIN_HEALTHY_PERCENTAGE: ${{ vars.MIN_HEALTHY_PERCENTAGE }}
      TARGET_ENV: ${{ vars.TARGET_ENV }}
      PKR_AWS_ACCESS_KEY_ID: ${{ secrets.PKR_AWS_ACCESS_KEY_ID }}
      PKR_AWS_SECRET_ACCESS_KEY: ${{ secrets.PKR_AWS_SECRET_ACCESS_KEY }}
      DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
      DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
      DEMO_AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
      DEMO_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PKR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PKR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create config file for test properties file
        run: |
          echo "spring.application.name=${{ env.TEST_APP_NAME }}" > /tmp/testwebappconfig.properties
          echo "spring.datasource.url=jdbc:mysql://localhost:${{ env.TEST_DB_PORT }}/${{ env.TEST_DB_NAME }}" >> /tmp/testwebappconfig.properties
          echo "spring.datasource.username=${{ env.TEST_MYSQL_USER }}" >> /tmp/testwebappconfig.properties
          echo "spring.datasource.password=${{ env.TEST_MYSQL_PASSWORD }}" >> /tmp/testwebappconfig.properties
          echo "server.port=${{ env.TEST_APP_PORT }}" >> /tmp/testwebappconfig.properties
          echo "logging.level.root=${{ env.TEST_LOG_LEVEL }}" >> /tmp/testwebappconfig.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ env.TEST_DB_OPERATION}}" >> /tmp/testwebappconfig.properties
          echo "io.reflectoring.aws.s3.bucket-name=testbucket" >> /tmp/testwebappconfig.properties
          echo "aws.sns.topic.arn=dummy-arn-for-testing" >> /tmp/testwebappconfig.properties
          echo "statsd.host=localhost" >> /tmp/testwebappconfig.properties
          echo "statsd.port=8125" >> /tmp/testwebappconfig.properties
          echo "statsd.enabled=true" >> /tmp/testwebappconfig.properties

      - name: Create config file for prod properties file
        run: |
          echo "spring.application.name=${{ env.PROD_APP_NAME }}" > /tmp/prodwebappconfig.properties
          echo "server.port=${{ env.PROD_APP_PORT }}" >> /tmp/prodwebappconfig.properties
          echo "logging.level.root=${{ env.PROD_LOG_LEVEL }}" >> /tmp/prodwebappconfig.properties
          echo "logging.file.name=application.log" >> /tmp/prodwebappconfig.properties
          echo "logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" >> /tmp/prodwebappconfig.properties

      - name: Start MySQL server
        run: sudo systemctl start mysql.service

      - name: Check MySQL status
        run: sudo systemctl status mysql.service

      - name: Create MySQL user if not exists
        run: |
          mysql -u${{ env.MYSQL_ROOT_USER }} -p${{ env.MYSQL_ROOT_PASSWORD }} -e "CREATE USER '${{ env.TEST_MYSQL_USER }}'@'%' IDENTIFIED BY '${{ env.TEST_MYSQL_PASSWORD }}'; GRANT ALL PRIVILEGES ON *.* TO '${{ env.TEST_MYSQL_USER }}'@'%';"

      - name: Create test database if not exists
        run: |
          mysql -e "CREATE DATABASE IF NOT EXISTS ${{ env.TEST_DB_NAME }};" -u${{ env.TEST_MYSQL_USER }} -p${{ env.TEST_MYSQL_PASSWORD }}

      - name: Install Maven dependencies
        run: mvn install -Dspring.profiles.active=test

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.0"

      - name: Initialize Packer
        run: packer init packer/webapp-ubuntu.pkr.hcl

      - name: Format Packer
        run: packer fmt -check packer/

      - name: Validate Packer WebApp
        run: "packer validate \
          -var \"ami_prefix=${{ env.PKR_AMI_PREFIX }}\" \
          -var \"region=${{ env.PKR_REGION }}\" \
          -var \"vpc_id=${{ env.PKR_VPC_ID }}\" \
          -var \"subnet_id=${{ env.PKR_SUBNET_ID }}\" \
          -var \"ami_owner=${{ env.PKR_AMI_OWNER }}\" \
          -var \"instance_type=${{ env.PKR_INSTANCE_TYPE }}\" \
          -var \"ssh_username=${{ env.PKR_SSH_USERNAME }}\" \
          -var \"volume_size=${{ fromJson(env.PKR_VOLUME_SIZE) }}\" \
          -var \"volume_type=${{ env.PKR_VOLUME_TYPE }}\" \
          -var \"ami_users=${{ env.PKR_AMI_USERS }}\" \
          -var \"ami_regions=${{ env.PKR_AMI_REGIONS }}\" \
          packer/"

      - name: Build AMI
        id: build-ami
        run: |
          packer_output=$(packer build \
            -var "ami_prefix=${{ env.PKR_AMI_PREFIX }}" \
            -var "region=${{ env.PKR_REGION }}" \
            -var "vpc_id=${{ env.PKR_VPC_ID }}" \
            -var "subnet_id=${{ env.PKR_SUBNET_ID }}" \
            -var "ami_owner=${{ env.PKR_AMI_OWNER }}" \
            -var "instance_type=${{ env.PKR_INSTANCE_TYPE }}" \
            -var "ssh_username=${{ env.PKR_SSH_USERNAME }}" \
            -var "volume_size=${{ fromJson(env.PKR_VOLUME_SIZE) }}" \
            -var "volume_type=${{ env.PKR_VOLUME_TYPE }}" \
            -var "ami_users=${{ env.PKR_AMI_USERS }}" \
            -var "ami_regions=${{ env.PKR_AMI_REGIONS }}" \
            packer/)
          echo "$packer_output"
          AMI_ID=$(echo "$packer_output" | grep -o 'ami-[a-z0-9]*' | tail -1)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
        env:
          PACKER_LOG: 1

      - name: Configure AWS Credentials for Target Environment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.TARGET_ENV == 'dev' && env.DEV_AWS_ACCESS_KEY_ID || env.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.TARGET_ENV == 'dev' && env.DEV_AWS_SECRET_ACCESS_KEY || env.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Launch Template
        run: |
          echo "Fetching Launch Template ID..."
          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=${{ env.LAUNCH_TEMPLATE_NAME }}" \
            --query 'LaunchTemplates[0].LaunchTemplateId')
          
          # Remove quotes from the query result
          TEMPLATE_ID=$(echo $TEMPLATE_ID | tr -d '"')

          echo "Creating new Launch Template version with AMI ID: ${{ env.AMI_ID }}"
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${TEMPLATE_ID} \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber')
          
          # Remove quotes from the query result
          NEW_VERSION=$(echo $NEW_VERSION | tr -d '"')

          echo "Created Launch Template version: ${NEW_VERSION}"

      - name: Refresh Auto Scaling Group
        run: |
          echo "Starting instance refresh for ASG: ${{ env.ASG_NAME }}"
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --preferences "{\"MinHealthyPercentage\": ${{ env.MIN_HEALTHY_PERCENTAGE }}}" \
            --query 'InstanceRefreshId')
          
          # Remove quotes from the query result
          REFRESH_ID=$(echo $REFRESH_ID | tr -d '"')
          
          echo "Monitoring instance refresh status..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ env.ASG_NAME }} \
              --instance-refresh-ids ${REFRESH_ID} \
              --query 'InstanceRefreshes[0].Status')
          
            # Remove quotes from the query result
            STATUS=$(echo $STATUS | tr -d '"')
          
            echo "Current refresh status: ${STATUS}"
          
            if [ "${STATUS}" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "${STATUS}" = "Failed" ] || [ "${STATUS}" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            fi
          
            sleep 30
          done