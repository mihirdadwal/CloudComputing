name: "CSYE6225 User Onboarding Packer Validate Workflow"

on:
  pull_request:
      branches:
        - 'main'
      paths:
        - '**'
jobs:
  packer-validate:
    name: User Onboarding API Packer Validate
    runs-on: ubuntu-latest
    env:
        MYSQL_ROOT_USER: ${{ secrets.MYSQL_ROOT_USER }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        TEST_APP_NAME: ${{ vars.TEST_APP_NAME }}
        TEST_APP_PORT: ${{ secrets.TEST_APP_PORT }}
        TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
        TEST_DB_OPERATION: ${{ secrets.TEST_DB_OPERATION }}
        TEST_MYSQL_PASSWORD: ${{ secrets.TEST_MYSQL_PASSWORD }}
        TEST_MYSQL_USER: ${{ secrets.TEST_MYSQL_USER }}
        TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}
        TEST_LOG_LEVEL: ${{ vars.TEST_LOG_LEVEL }}
        PROD_APP_NAME: ${{ vars.PROD_APP_NAME }}
        PROD_APP_PORT: ${{ secrets.PROD_APP_PORT }}
        PROD_LOG_LEVEL: ${{ vars.PROD_LOG_LEVEL }}
        PKR_AWS_ACCESS_KEY_ID: ${{ secrets.PKR_AWS_ACCESS_KEY_ID }}
        PKR_AWS_SECRET_ACCESS_KEY: ${{ secrets.PKR_AWS_SECRET_ACCESS_KEY }}
        PKR_AMI_OWNER: ${{ vars.PKR_AMI_OWNER }}
        PKR_AMI_PREFIX: ${{ vars.PKR_AMI_PREFIX }}
        PKR_AMI_USERS: ${{ vars.PKR_AMI_USERS }}
        PKR_INSTANCE_TYPE: ${{ vars.PKR_INSTANCE_TYPE }}
        PKR_REGION: ${{ vars.PKR_REGION }}
        PKR_SSH_USERNAME: ${{ vars.PKR_SSH_USERNAME }}
        PKR_SUBNET_ID: ${{ vars.PKR_SUBNET_ID }}
        PKR_VOLUME_SIZE: ${{ vars.PKR_VOLUME_SIZE }}
        PKR_VOLUME_TYPE: ${{ vars.PKR_VOLUME_TYPE }}
        PKR_VPC_ID: ${{ vars.PKR_VPC_ID }}
        PKR_AMI_REGIONS: ${{ vars.PKR_AMI_REGIONS }}
        AWS_REGION: ${{ vars.AWS_REGION }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
            java-version: '17'
            distribution: 'adopt'
            cache: 'maven'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PKR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PKR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create config file for test properties file
        run: |
          echo "spring.application.name=${{ env.TEST_APP_NAME }}" > /tmp/testwebappconfig.properties
          echo "spring.datasource.url=jdbc:mysql://localhost:${{ env.TEST_DB_PORT }}/${{ env.TEST_DB_NAME }}" >> /tmp/testwebappconfig.properties
          echo "spring.datasource.username=${{ env.TEST_MYSQL_USER }}" >> /tmp/testwebappconfig.properties
          echo "spring.datasource.password=${{ env.TEST_MYSQL_PASSWORD }}" >> /tmp/testwebappconfig.properties
          echo "server.port=${{ env.TEST_APP_PORT }}" >> /tmp/testwebappconfig.properties
          echo "logging.level.root=${{ env.TEST_LOG_LEVEL }}" >> /tmp/testwebappconfig.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ env.TEST_DB_OPERATION}}" >> /tmp/testwebappconfig.properties
          echo "io.reflectoring.aws.s3.bucket-name=testbucket" >> /tmp/testwebappconfig.properties
          echo "aws.sns.topic.arn=dummy-arn-for-testing" >> /tmp/testwebappconfig.properties
          echo "statsd.host=localhost" >> /tmp/testwebappconfig.properties
          echo "statsd.port=8125" >> /tmp/testwebappconfig.properties
          echo "statsd.enabled=true" >> /tmp/testwebappconfig.properties

      - name: Create config file for prod properties file
        run: |
          echo "spring.application.name=${{ env.PROD_APP_NAME }}" > /tmp/prodwebappconfig.properties
          echo "server.port=${{ env.PROD_APP_PORT }}" >> /tmp/prodwebappconfig.properties
          echo "logging.level.root=${{ env.PROD_LOG_LEVEL }}" >> /tmp/prodwebappconfig.properties
          echo "logging.file.name=application.log" >> /tmp/prodwebappconfig.properties
          echo "logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" >> /tmp/prodwebappconfig.properties

      - name: Start MySQL server
        run: sudo systemctl start mysql.service

      - name: Check MySQL status
        run: sudo systemctl status mysql.service

      - name: Create MySQL user if not exists
        run: |
            mysql -u${{ env.MYSQL_ROOT_USER }} -p${{ env.MYSQL_ROOT_PASSWORD }} -e "CREATE USER '${{ env.TEST_MYSQL_USER }}'@'%' IDENTIFIED BY '${{ env.TEST_MYSQL_PASSWORD }}'; GRANT ALL PRIVILEGES ON *.* TO '${{ env.TEST_MYSQL_USER }}'@'%';"

      - name: Create test database if not exists
        run: |
            mysql -e "CREATE DATABASE IF NOT EXISTS ${{ env.TEST_DB_NAME }};" -u${{ env.TEST_MYSQL_USER }} -p${{ env.TEST_MYSQL_PASSWORD }}

      - name: Install Maven dependencies
        run: mvn install -Dspring.profiles.active=test

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.0"

      - name: Initialize Packer
        run: packer init packer/webapp-ubuntu.pkr.hcl

      - name: Format Packer
        run: packer fmt -check packer/

      - name: Validate Packer WebApp
        run: "packer validate \
          -var \"ami_prefix=${{ env.PKR_AMI_PREFIX }}\" \
          -var \"region=${{ env.PKR_REGION }}\" \
          -var \"vpc_id=${{ env.PKR_VPC_ID }}\" \
          -var \"subnet_id=${{ env.PKR_SUBNET_ID }}\" \
          -var \"ami_owner=${{ env.PKR_AMI_OWNER }}\" \
          -var \"instance_type=${{ env.PKR_INSTANCE_TYPE }}\" \
          -var \"ssh_username=${{ env.PKR_SSH_USERNAME }}\" \
          -var \"volume_size=${{ fromJson(env.PKR_VOLUME_SIZE) }}\" \
          -var \"volume_type=${{ env.PKR_VOLUME_TYPE }}\" \
          -var \"ami_users=${{ env.PKR_AMI_USERS }}\" \
          -var \"ami_regions=${{ env.PKR_AMI_REGIONS }}\" \
          packer/"